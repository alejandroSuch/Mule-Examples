/**
 * This file was automatically generated by the Mule ESB Maven Tools
 */
package com.veamospues.muleapp;

import org.junit.Test;
import org.mule.DefaultMuleMessage;
import org.mule.api.MuleMessage;
import org.mule.api.client.MuleClient;
import org.mule.api.transport.PropertyScope;
import org.mule.construct.Flow;
import org.mule.tck.junit4.FunctionalTestCase;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

public class MessagesTestCase extends FunctionalTestCase {
  private static final int RECEIVE_TIMEOUT = 5000;
  public static final String CONFIG_FILE = "src/main/app/mule-config.xml";

  @Override
  protected String getConfigFile() {
    return CONFIG_FILE;
  }

  @Test
  public void testConfiguration() throws Exception {
    MuleClient client = muleContext.getClient();
    MuleMessage message = new DefaultMuleMessage("world", muleContext);

    client.dispatch("vm://in", message);

    MuleMessage resultMessage = client.request("vm://out", RECEIVE_TIMEOUT);

    // Flow variables do not live beyond the flows they were created
    assertNull(resultMessage.getInvocationProperty("aVariable"));
    assertNull(resultMessage.getInvocationProperty("anotherVariable"));

    // Session variables live beyond the flows they were created
    assertNotNull(resultMessage.getProperty("sessionVar", PropertyScope.SESSION, null));

    //Outbound properties are transformed into inbound properties in the next flow
    assertEquals(new Integer(2), Integer.valueOf(resultMessage.getInboundProperty("secondOutboundProperty").toString()));
    assertNull(resultMessage.getInboundProperty("firstOutboundProperty"));

    assertEquals("Hello, world!", resultMessage.getPayloadAsString());
  }

  @Test
  public void testFlowIsStopped() throws Exception{
    ((Flow)muleContext.getRegistry().lookupObject("main.1")).stop();
    ((Flow)muleContext.getRegistry().lookupObject("main.2")).stop();

    final MuleClient client = muleContext.getClient();
    final MuleMessage message = new DefaultMuleMessage("world", muleContext);

    client.dispatch("vm://in", message);

    final MuleMessage resultMessage = client.request("vm://out", RECEIVE_TIMEOUT);

    assertNull(resultMessage);
  }
}
